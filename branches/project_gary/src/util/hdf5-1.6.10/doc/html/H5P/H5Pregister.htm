<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pregister" -->
<hr>
<dl>
  <dt><strong>Name:</strong> <a name="Property-Register">H5Pregister</a>

  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Pregister</code>(
                  <em>hid_t</em> <code>class</code>,
                  <em>const char *</em> <code>name</code>,
                  <em>size_t</em> <code>size</code>,
                  <em>void *</em> <code>default</code>,
                  <em>H5P_prp_create_func_t</em> <code>create</code>,
                  <em>H5P_prp_set_func_t</em> <code>set</code>,
                  <em>H5P_prp_get_func_t</em> <code>get</code>,
                  <em>H5P_prp_delete_func_t</em> <code>delete</code>,
                  <em>H5P_prp_copy_func_t</em> <code>copy</code>,
                  <em>H5P_prp_close_func_t</em> <code>close</code>
				 )
				 
  <dt><strong>Purpose:</strong>
    <dd>Registers a permanent property with a property list class.
	
  <dt><strong>Description:</strong>
    <dd><code>H5Pregister</code> registers a new property with a 
    property list class.  
    The property will exist in all property list objects of 
    <code>class</code> created after this routine finishes.  The name 
    of the property must not already exist, or this routine will fail.  
    The default property value must be provided and all new property 
    lists created with this property will have the property value set 
    to the default value.  Any of the callback routines may be set to
    NULL if they are not needed.

    <P>
    Zero-sized properties are allowed and do not store any data in the
    property list.  These may be used as flags to indicate the presence 
    or absence of a particular piece of information.  The default pointer 
    for a zero-sized property may be set to NULL.  
    The property <code>create</code> and <code>close</code> callbacks 
    are called for zero-sized properties, but the <code>set</code> and 
    <code>get</code> callbacks are never called.
    </P>
	
    <P>
    The <code>create</code> routine is called when a new property list 
    with this property is being created.  
    The <code>H5P_prp_create_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_create_func_t</code>)(
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>initial_value</code>);
        </ul>
    The parameters to this callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being modified</td></tr>
    <tr>
        <td><em>size_t</em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>initial_value</code></td>
        <td>IN/OUT: The default value for the property being created,
                which will be passed to <code>H5Pregister</code></td></tr>
    </table></ul>
    The <code>create</code> routine may modify the value to be set and 
    those changes will be stored as the initial value of the property.  
    If the <code>create</code> routine returns a negative value, 
    the new property value is not copied into the property and the 
    create routine returns an error value.
    </P>
	
    <P>
    The <code>set</code> routine is called before a new value is copied 
    into the property.  
    The <code>H5P_prp_set_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*H5P_prp_set_func_t)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>new_value</code>);
        </ul>
    The parameters to this callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being modified</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being modified</td></tr>
    <tr>
        <td><em>size_t </em><code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void **</em><code>new_value</code></td>
        <td>IN/OUT: Pointer to new value pointer for the property being 
		    modified</td></tr>
    </table></ul>
    The <code>set</code> routine may modify the value pointer to be set 
    and those changes will be used when setting the property's value.  
    If the <code>set</code> routine returns a negative value, the new 
    property value is not copied into the property and the 
    <code>set</code> routine returns an error value.  
    The <code>set</code> routine will not be called for the initial 
    value, only the <code>create</code> routine will be called.
    <p>
    <strong>Note:</strong> 
    The <code>set</code> callback function may be useful 
    to range check the value being set for the property 
    or may perform some transformation or translation of the
    value set.  The <code>get</code> callback would then 
    reverse the transformation or translation.  
    A single <code>get</code> or <code>set</code> callback 
    could handle multiple properties by 
    performing different actions based on the
    property name or other properties in the property list.

    <p>
    The <code>get</code> routine is called when a value is retrieved 
    from a property value.  
    The <code>H5P_prp_get_func_t</code> callback function is defined 
	as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_get_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being queried</td></tr>
    <tr>
        <td><em>const char *</em> <code>name</code></td>
        <td>IN: The name of the property being queried</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN/OUT: The value of the property being returned</td></tr>
    </table></ul>
    The <code>get</code> routine may modify the value to be returned from 
    the query and those changes will be returned to the calling routine.  
    If the <code>set</code> routine returns a negative value, the query 
    routine returns an error value.
    </P>

    <P>
    The <code>delete</code> routine is called when a property is being 
    deleted from a property list.  
    The <code>H5P_prp_delete_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_delete_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list the property is being 
		    deleted from</td></tr>
    <tr>
        <td><em>const char *</em> <code>name</code></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN: The value for the property being deleted</td></tr>
    </table></ul>
    The <code>delete</code> routine may modify the value passed in, 
    but the value is not used by the library when the <code>delete</code> 
    routine returns.  If the <code>delete</code> routine returns 
    a negative value, the property list delete routine returns 
    an error value but the property is still deleted.
    </P>

    <P>
    The <code>copy</code> routine is called when a new property list with 
    this property is being created through a copy operation.  
    The <code>H5P_prp_copy_func_t</code> callback function is defined
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_copy_func_t</code>)(
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being copied</td></tr>
    <tr>
        <td><em>size_t </em><code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN/OUT: The value for the property being copied</td></tr>
    </table></ul>
    The <code>copy</code> routine may modify the value to be set and 
    those changes will be stored as the new value of the property.  
    If the <code>copy</code> routine returns a negative value, 
    the new property value is not copied into the property and 
    the copy routine returns an error value.
    </P>

    The <code>close</code> routine is called when a property list with 
    this property is being closed.  
    The <code>H5P_prp_close_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_close_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being 
		    closed</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><em>size_t</em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN: The value for the property being closed</td></tr>
    </table></ul>
    The <code>close</code> routine may modify the value passed in, 
    but the value is not used by the library when the 
    <code>close</code> routine returns.  
    If the <code>close</code> routine returns a negative value, 
    the property list close routine returns an error value but
    the property list is still closed.
    </P>
	
<dt><strong>Parameters:</strong>
    <ul><table>
      <tr>
	    <td valign="top"><code>hid_t</code> <em>class</em></td>
        <td valign="top">IN: Property list class to register permanent property 
		    within</td></tr>
      <tr>
	    <td valign="top"><code>const char *</code> <em>name</em></td>
        <td valign="top">IN: Name of property to register</td></tr>
      <tr>
	    <td valign="top"><code>size_t</code> <em>size</em></td>
        <td valign="top">IN: Size of property in bytes</td></tr>
      <tr>
	    <td valign="top"><code>void *</code> <em>default</em></td>
        <td valign="top">IN: Default value for property in newly created property 
		    lists</td></tr>
      <tr>
	    <td valign="top"><code>H5P_prp_create_func_t</code>&nbsp;<em>create&nbsp;&nbsp;&nbsp;&nbsp;</em></td>
        <td valign="top">IN: Callback routine called when a property list is being 
            created and the property value will be initialized</td></tr>
      <tr>
	    <td valign="top"><code>H5P_prp_set_func_t</code> <em>set</em></td>
        <td valign="top">IN: Callback routine called before a new value is copied 
            into the property's value</td></tr>
      <tr>
	    <td valign="top"><code>H5P_prp_get_func_t</code> <em>get</em></td>
        <td valign="top">IN: Callback routine called when a property value is 
            retrieved from the property</td></tr>
      <tr>
	    <td valign="top"><code>H5P_prp_delete_func_t</code> <em>delete</em></td>
        <td valign="top">IN: Callback routine called when a property is deleted from
            a property list</td></tr>
      <tr>
	    <td valign="top"><code>H5P_prp_copy_func_t</code> <em>copy</em></td>
        <td valign="top">IN: Callback routine called when a property is copied from
            a property list</td></tr>
      <tr>
	    <td valign="top"><code>H5P_prp_close_func_t</code> <em>close</em></td>
        <td valign="top">IN: Callback routine called when a property list is being 
            closed and the property value will be disposed of</td></tr>
    </table></ul>

<dt><strong>Returns:</strong>
    <dd>Success: a non-negative value
    <dd>Failure: a negative value

  <dt><strong>Fortran90 Interface:</strong> h5pregister_f
    <dd>
	<pre>
SUBROUTINE h5pregister_f
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: class   ! Property list class identifier 
  CHARACTER(LEN=*), INTENT(IN) :: name  ! Name of property to register
  INTEGER(SIZE_T), INTENT(IN) :: size   ! Size of the property value	
  TYPE,   INTENT(IN) :: value           ! Property value
                                        ! Supported types are:
                                        !    INTEGER
                                        !    REAL
                                        !    DOUBLE PRECISION
                                        !    CHARACTER(LEN=*)
  INTEGER, INTENT(OUT) :: hdferr        ! Error code
                                        ! 0 on success and -1 on failure
END SUBROUTINE h5pregister_f
	</pre>		
		
		<!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
</dl>

