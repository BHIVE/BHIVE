<!-- NEW PAGE -->
<!-- HEADER RIGHT "H5Pinsert" -->
<hr>
<dl>
  <dt><strong>Name:</strong> <a name="Property-Insert">H5Pinsert</a>

  <dt><strong>Signature:</strong>
    <dd><em>herr_t</em> <code>H5Pinsert</code>(
                  <em>hid_t</em> <code>plid</code>,
                  <em>const char *</em><code>name</code>,
                  <em>size_t</em> <code>size</code>,
                  <em>void *</em><code>value</code>,
                  <em>H5P_prp_set_func_t</em> <code>set</code>,
                  <em>H5P_prp_get_func_t</em> <code>get</code>,
                  <em>H5P_prp_delete_func_t</em> <code>delete</code>,
                  <em>H5P_prp_copy_func_t</em> <code>copy</code>,
                  <em>H5P_prp_close_func_t</em> <code>close</code>
		)

  <dt><strong>Purpose:</strong>
    <dd>Registers a temporary property with a property list.

  <dt><strong>Description:</strong>
    <dd><code>H5Pinsert</code> create a new property in a property list.  
    The property will exist only in this property list and copies made 
    from it.  
	
    <p>
    The initial property value must be provided in 
    <code>value</code> and the property value will be set accordingly.  
	
    <p>
    The name of the property must not already exist in this list, 
    or this routine will fail.  
	
    <p>
    The <code>set</code> and <code>get</code> callback routines may 
    be set to NULL if they are not needed.

    <p>
    Zero-sized properties are allowed and do not store any data in the
    property list.  The default value of a zero-size property may be set 
    to NULL.  They may be used to indicate the presence or absence of a 
    particular piece of information.
    </p>

    The <code>set</code> routine is called before a new value is copied 
    into the property.  
    The <code>H5P_prp_set_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_set_func_t</code>)(
            <em>hid_t</em> <code>prop_id</code>,
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>new_value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being modified</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being modified</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void **</em><code>new_value</code></td>
        <td>IN: Pointer to new value pointer for the property being 
		    modified</td></tr>
    </table></ul>
    The <code>set</code> routine may modify the value pointer to be set 
    and those changes will be used when setting the property's value.  
    If the <code>set</code> routine returns a negative value, the new 
    property value is not copied into the property and the set routine 
    returns an error value.  
    The <code>set</code> routine will be called for the initial value.
    <p>
    <strong>Note:</strong> 
    The <code>set</code> callback function may be useful 
    to range check the value being set for the property 
    or may perform some transformation or translation of the
    value set.  The <code>get</code> callback would then 
    reverse the transformation or translation.  
    A single <code>get</code> or <code>set</code> callback 
    could handle multiple properties by 
    performing different actions based on the
    property name or other properties in the property list.

    <p>
    The <code>get</code> routine is called when a value is retrieved 
    from a property value.  
    The <code>H5P_prp_get_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_get_func_t</code>)(
            <em>hid_t</em> <code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    where the parameters to the callback function are:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list being queried</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being queried</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN: The value of the property being returned</td></tr>
    </table></ul>
    The <code>get</code> routine may modify the value to be returned from 
    the query and those changes will be preserved. 
    If the <code>get</code> routine returns a negative value, the query 
    routine returns an error value.
    </p>

    <P>
    The <code>delete</code> routine is called when a property is being 
    deleted from a property list.  
    The <code>H5P_prp_delete_func_t</code> callback function is defined 
    as follows:
        <ul><code>typedef herr_t</code> (*<code>H5P_prp_delete_func_t</code>)(
            <em>hid_t </em><code>prop_id</code>, 
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    where the parameters to the callback function are:
    <ul><table>
    <tr>
        <td><em>hid_t</em> <code>prop_id</code></td>
        <td>IN: The identifier of the property list the property is 
		    being deleted from</td></tr>
    <tr>
        <td><em>const char *</em> <code>name</code></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN: The value for the property being deleted</td></tr>
    </table></ul>
    The <code>delete</code> routine may modify the value passed in, 
    but the value is not used by the library when the <code>delete</code> 
    routine returns.  If the <code>delete</code> routine returns a 
    negative value, the property list delete routine returns an 
    error value but the property is still deleted. 
    </P>
    
    <P>
    The <code>copy</code> routine is called when a new property list 
    with this property is being created through a copy operation.  
    The <code>H5P_prp_copy_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_copy_func_t</code>)(
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    where the parameters to the callback function are:
    <ul><table>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: The name of the property being copied</td></tr>
    <tr>
        <td><em>size_t </em> <code>size</code></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><em>void *</em> <code>value</code></td>
        <td>IN/OUT: The value for the property being copied</td></tr>
    </table></ul>
    The <code>copy</code> routine may modify the value to be set and 
    those changes will be stored as the new value of the property.  
    If the <code>copy</code> routine returns a negative value, the 
    new property value is not copied into the property and the 
    copy routine returns an error value.

    <P>The <code>close</code> routine is called when a property list 
    with this property is being closed.  
    The <code>H5P_prp_close_func_t</code> callback function is defined 
    as follows:
        <ul><em>typedef herr_t</em> (*<code>H5P_prp_close_func_t</code>)(
            <em>hid_t</em> <code>prop_id</code>,
            <em>const char *</em><code>name</code>,
            <em>size_t </em><code>size</code>,
            <em>void *</em><code>value</code>);
        </ul>
    The parameters to the callback function are defined as follows:
    <ul><table>
    <tr>
        <td><code>hid_t</em> <code>prop_id</em></td>
        <td>IN: The ID of the property list being closed</td></tr>
    <tr>
        <td><code>const char *</code><em>name</em></td>
        <td>IN: The name of the property in the list</td></tr>
    <tr>
        <td><code>size_t </code> <em>size</em></td>
        <td>IN: The size of the property in bytes</td></tr>
    <tr>
        <td><code>void *</code><em>value</em></td>
        <td>IN: The value for the property being closed</td></tr>
    </table></ul>
    The <code>close</code> routine may modify the value passed in, the value 
    is not used by the library when the <code>close</code> routine returns.  
    If the <code>close</code> routine returns a negative value, the  
    property list close routine returns an error value but the property list 
    is still closed.

    <p>
    <strong>Note:</strong>
    There is no <code>create</code> callback routine for temporary property 
    list objects; the initial value is assumed to have any necessary setup 
    already performed on it.

  <dt><strong>Parameters:</strong>
    <ul><table>
    <tr>
        <td><code>hid_t</code> <code>plid</em></td>
        <td>IN: Property list identifier to create temporary property 
	        within</td></tr>
    <tr>
        <td><em>const char *</em><code>name</code></td>
        <td>IN: Name of property to create</td></tr>
    <tr>
        <td><em>size_t</em> <code>size</code></td>
        <td>IN: Size of property in bytes</td></tr>
    <tr>
        <td><em>void *</em><code>value</code></td>
        <td>IN: Initial value for the property</td></tr>
    <tr>
        <td><em>H5P_prp_set_func_t</em> <code>set</code></td>
        <td>IN: Callback routine called before a new value is copied into 
                the property's value</td></tr>
    <tr>
        <td><em>H5P_prp_get_func_t</em> <code>get</code></td>
        <td>IN: Callback routine called when a property value is retrieved 
                from the property</td></tr>
    <tr>
        <td><em>H5P_prp_delete_func_t</em>&nbsp;<code>delete&nbsp;&nbsp;&nbsp;&nbsp;</code></td>
        <td>IN: Callback routine called when a property is deleted from
                a property list</td></tr>
    <tr>
        <td><em>H5P_prp_copy_func_t</em> <code>copy</code></td>
        <td>IN: Callback routine called when a property is copied from
                an existing property list</td></tr>
    <tr>
        <td><em>H5P_prp_close_func_t</em> <code>close</code></td>
        <td>IN: Callback routine called when a property list is being closed 
                and the property value will be disposed of</td></tr>
    </table></ul>

  <dt><strong>Returns:</strong>
    <dd>Success: a non-negative value
    <dd>Failure: a negative value

  <dt><strong>Fortran90 Interface:</strong> h5pinsert_f
    <dd>
	<pre>
SUBROUTINE h5pinsert_f
  IMPLICIT NONE
  INTEGER(HID_T), INTENT(IN) :: plist   ! Property list class identifier 
  CHARACTER(LEN=*), INTENT(IN) :: name  ! Name of property to insert
  INTEGER(SIZE_T), INTENT(IN) :: size   ! Size of the property value	
  TYPE,   INTENT(IN) :: value           ! Property value
                                        ! Supported types are:
                                        !    INTEGER
                                        !    REAL
                                        !    DOUBLE PRECISION
                                        !    CHARACTER(LEN=*)
  INTEGER, INTENT(OUT) :: hdferr        ! Error code
                                        ! 0 on success and -1 on failure
END SUBROUTINE h5pinsert_f
	</pre>		
		
		<!--<dt><strong>Non-C API(s):</strong>
    	<dd>
        
        <img src="Graphics/Java.gif"> 
        <img src="Graphics/C++.gif">
        -->
</dl>

