<!-- NEW PAGE -->
<!-- HEADER RIGHT "h5cc and h5pcc" -->
<hr>
<dl>
<dt><strong>Tool Names:</strong> <a name="Tools-H5CC">h5cc and h5pcc</a>
<dt><strong>Syntax:</strong>
    <dd><code>h5cc
        [</code><em>OPTIONS</em><code> ]</code> <em>compile_line</em>
    <dd><code>h5pcc
        [</code><em>OPTIONS</em><code> ]</code> <em>compile_line</em>
<dt><strong>Purpose:</strong>
    <dd>Helper scripts to compile HDF5 C applications.
<dt><strong>Description:</strong>
    <dd><code>h5cc</code> and <code>h5pcc</code> can be used in much 
        the same way as <code>mpicc</code> by MPICH is used to compile 
        an HDF5 program. 
        These tools take care of specifying on the command line
        the locations of the HDF5 header files and libraries.
        <code>h5cc</code> is for use in serial computing environments;
        <code>h5pcc</code> is for parallel environments.
        <p>
        <code>h5cc</code> and <code>h5pcc</code> subsume all other 
        compiler scripts in that if you have used a set of scripts to compile 
        the HDF5 library, then <code>h5cc</code> and <code>h5pcc</code> 
        also use those scripts.  
        For example, when compiling an MPICH program, you use the 
        <code>mpicc</code> script. 
        If you have built HDF5 using MPICH, then <code>h5cc</code>
        uses the MPICH program for compilation.
        <p>
        Some programs use HDF5 in only a few modules. 
        It is not necessary to use <code>h5cc</code> or <code>h5pcc</code> 
        to compile those modules which do not use HDF5. 
        In fact, since <code>h5cc</code> and <code>h5pcc</code> are only 
        convenience scripts, you can still compile HDF5 modules in the 
        normal manner, though you will have to specify the HDF5 libraries 
        and include paths yourself.
        Use the <code>-show</code> option to see the details.
        <p>
        An example of how to use <code>h5cc</code> to compile the program
        <code>hdf_prog</code>, which consists of the modules
        <code>prog1.c</code> and <code>prog2.c</code> and uses the HDF5
        shared library, would be as follows.
        <code>h5pcc</code> is used in an identical manner.
        <pre>
        # h5cc -c prog1.c
        # h5cc -c prog2.c
        # h5cc -shlib -o hdf_prog prog1.o prog2.o </pre>
<dt><strong>Options and Parameters:</strong>
    <dd>
    <dl>
        <dt><code>-help</code>
            <dd>Print a help message.
        <dt><code>-echo</code>
            <dd>Show all the shell commands executed.
        <dt><code>-prefix=DIR</code>
            <dd>Use the directory <code><em>DIR</em></code> to find the HDF5 
                <code>lib/</code> and <code>include/</code> subdirectories. 
                <br>
                Default: prefix specified when configuring HDF5.
        <dt><code>-show</code>
            <dd>Show the commands without executing them.
        <dt><code>-shlib</code>
            <dd>Compile using shared HDF5 libraries.
        <dt><code>-noshlib</code>
            <dd>Compile using static HDF5 libraries [default].
        <dt><em>compile_line</em>
            <dd>The normal compile line options for your compiler. 
                <code>h5cc</code> and <code>h5pcc</code> use the 
                same compiler you used to compile HDF5; 
                check your compiler's manual for more information 
                on which options are needed.
    </dl>
<!-- NEW PAGE -->
<dt><strong>Environment Variables:</strong>
    <dd>When set, these environment variables override some of the built-in
        <code>h5cc</code> and <code>h5pcc</code> defaults.
    <dl>
        <dt><code>HDF5_CC</code>
            <dd>Use a different C compiler.
        <dt><code>HDF5_CLINKER</code>
            <dd>Use a different linker.
        <dt><code>HDF5_USE_SHLIB=[yes|no]</code>
            <dd>Use shared version of the HDF5 library [default: no].
    </dl>
<!--
<dt><strong>Current Status:</strong>
    <dd>
<dt><strong>See Also:</strong>
    <dd>
 -->
</dl>

